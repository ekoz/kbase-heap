###########\u3010Kafka\u96C6\u7FA4\u3011###########
spring.kafka.bootstrap-servers=ibothub:9192

###########\u3010\u521D\u59CB\u5316\u751F\u4EA7\u8005\u914D\u7F6E\u3011###########
# \u5982\u679C\u8BE5\u503C\u5927\u4E8E\u96F6\u65F6\uFF0C\u8868\u793A\u542F\u7528\u91CD\u8BD5\u5931\u8D25\u7684\u53D1\u9001\u6B21\u6570
spring.kafka.producer.retries=3

# \u5E94\u7B54\u7EA7\u522B
# procedure\u8981\u6C42leader\u5728\u8003\u8651\u5B8C\u6210\u8BF7\u6C42\u4E4B\u524D\u6536\u5230\u7684\u786E\u8BA4\u6570\uFF0C\u7528\u4E8E\u63A7\u5236\u53D1\u9001\u8BB0\u5F55\u5728\u670D\u52A1\u7AEF\u7684\u6301\u4E45\u5316\uFF0C\u5176\u503C\u53EF\u4EE5\u4E3A\u5982\u4E0B\uFF1A
# acks = 0 \u5982\u679C\u8BBE\u7F6E\u4E3A\u96F6\uFF0C\u5219\u751F\u4EA7\u8005\u5C06\u4E0D\u4F1A\u7B49\u5F85\u6765\u81EA\u670D\u52A1\u5668\u7684\u4EFB\u4F55\u786E\u8BA4\uFF0C\u8BE5\u8BB0\u5F55\u5C06\u7ACB\u5373\u6DFB\u52A0\u5230\u5957\u63A5\u5B57\u7F13\u51B2\u533A\u5E76\u89C6\u4E3A\u5DF2\u53D1\u9001\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u65E0\u6CD5\u4FDD\u8BC1\u670D\u52A1\u5668\u5DF2\u6536\u5230\u8BB0\u5F55\uFF0C\u5E76\u4E14\u91CD\u8BD5\u914D\u7F6E\u5C06\u4E0D\u4F1A\u751F\u6548\uFF08\u56E0\u4E3A\u5BA2\u6237\u7AEF\u901A\u5E38\u4E0D\u4F1A\u77E5\u9053\u4EFB\u4F55\u6545\u969C\uFF09\uFF0C\u4E3A\u6BCF\u6761\u8BB0\u5F55\u8FD4\u56DE\u7684\u504F\u79FB\u91CF\u59CB\u7EC8\u8BBE\u7F6E\u4E3A-1\u3002
# acks = 1 \u8FD9\u610F\u5473\u7740leader\u4F1A\u5C06\u8BB0\u5F55\u5199\u5165\u5176\u672C\u5730\u65E5\u5FD7\uFF0C\u4F46\u65E0\u9700\u7B49\u5F85\u6240\u6709\u526F\u672C\u670D\u52A1\u5668\u7684\u5B8C\u5168\u786E\u8BA4\u5373\u53EF\u505A\u51FA\u56DE\u5E94\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5982\u679Cleader\u5728\u786E\u8BA4\u8BB0\u5F55\u540E\u7ACB\u5373\u5931\u8D25\uFF0C\u4F46\u5728\u5C06\u6570\u636E\u590D\u5236\u5230\u6240\u6709\u7684\u526F\u672C\u670D\u52A1\u5668\u4E4B\u524D\uFF0C\u5219\u8BB0\u5F55\u5C06\u4F1A\u4E22\u5931\u3002
# acks = all \u8FD9\u610F\u5473\u7740leader\u5C06\u7B49\u5F85\u5B8C\u6574\u7684\u540C\u6B65\u526F\u672C\u96C6\u4EE5\u786E\u8BA4\u8BB0\u5F55\uFF0C\u8FD9\u4FDD\u8BC1\u4E86\u53EA\u8981\u81F3\u5C11\u4E00\u4E2A\u540C\u6B65\u526F\u672C\u670D\u52A1\u5668\u4ECD\u7136\u5B58\u6D3B\uFF0C\u8BB0\u5F55\u5C31\u4E0D\u4F1A\u4E22\u5931\uFF0C\u8FD9\u662F\u6700\u5F3A\u6709\u529B\u7684\u4FDD\u8BC1\uFF0C\u8FD9\u76F8\u5F53\u4E8Eacks = -1\u7684\u8BBE\u7F6E\u3002
# \u53EF\u4EE5\u8BBE\u7F6E\u7684\u503C\u4E3A\uFF1Aall, -1, 0, 1
spring.kafka.producer.acks=1

# \u6BCF\u5F53\u591A\u4E2A\u8BB0\u5F55\u88AB\u53D1\u9001\u5230\u540C\u4E00\u5206\u533A\u65F6\uFF0C\u751F\u4EA7\u8005\u5C06\u5C1D\u8BD5\u5C06\u8BB0\u5F55\u4E00\u8D77\u6279\u91CF\u5904\u7406\u4E3A\u66F4\u5C11\u7684\u8BF7\u6C42\uFF0C
# \u8FD9\u6709\u52A9\u4E8E\u63D0\u5347\u5BA2\u6237\u7AEF\u548C\u670D\u52A1\u5668\u4E0A\u7684\u6027\u80FD\uFF0C\u6B64\u914D\u7F6E\u63A7\u5236\u9ED8\u8BA4\u6279\u91CF\u5927\u5C0F\uFF08\u4EE5\u5B57\u8282\u4E3A\u5355\u4F4D\uFF09\uFF0C\u9ED8\u8BA4\u503C\u4E3A16384
spring.kafka.producer.batch-size=16384

# \u63D0\u4EA4\u5EF6\u65F6
# \u5F53\u751F\u4EA7\u7AEF\u79EF\u7D2F\u7684\u6D88\u606F\u8FBE\u5230batch-size\u6216\u63A5\u6536\u5230\u6D88\u606Flinger.ms\u540E,\u751F\u4EA7\u8005\u5C31\u4F1A\u5C06\u6D88\u606F\u63D0\u4EA4\u7ED9kafka
# linger.ms\u4E3A0\u8868\u793A\u6BCF\u63A5\u6536\u5230\u4E00\u6761\u6D88\u606F\u5C31\u63D0\u4EA4\u7ED9kafka,\u8FD9\u65F6\u5019batch-size\u5176\u5B9E\u5C31\u6CA1\u7528\u4E86
#spring.kafka.producer.properties.linger.ms=0


# \u751F\u4EA7\u7AEF\u7F13\u51B2\u533A\u5927\u5C0F\uFF0C\u751F\u4EA7\u8005\u53EF\u7528\u4E8E\u7F13\u51B2\u7B49\u5F85\u53D1\u9001\u5230\u670D\u52A1\u5668\u7684\u8BB0\u5F55\u7684\u5185\u5B58\u603B\u5B57\u8282\u6570\uFF0C\u9ED8\u8BA4\u503C\u4E3A33554432
spring.kafka.producer.buffer-memory=33554432

# Kafka\u63D0\u4F9B\u7684\u5E8F\u5217\u5316\u548C\u53CD\u5E8F\u5217\u5316\u7C7B
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# \u81EA\u5B9A\u4E49\u5206\u533A\u5668
# spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner

###########\u3010\u521D\u59CB\u5316\u6D88\u8D39\u8005\u914D\u7F6E\u3011###########
# \u9ED8\u8BA4\u7684\u6D88\u8D39\u7EC4ID
# \u540C\u4E00\u4E2AConsumer Group \u91CC\u5982\u679C\u6709\u591A\u4E2AConsumer\uFF0C\u90A3\u5C31\u662FC1\u6D88\u8D39\u4E86 C2\u5C31\u4E0D\u4F1A\u6D88\u8D39
# \u5982\u679C\u591A\u4E2AConsumer \u5206\u522B\u5C5E\u4E8E\u4E0D\u540C\u7684CG\uFF0C\u90A3\u5C31\u662F\u8FD9\u51E0\u4E2AConsumer\u6BEB\u65E0\u5173\u7CFB\uFF0C\u6BCF\u4E2A\u90FD\u662F\u6D88\u8D39\u5168\u91CF
# groupId \u552F\u4E00\uFF0C\u652F\u6301\u591A\u8282\u70B9\u90E8\u7F72\uFF0C\u6D88\u8D39\u5B8C\u6BD5\u540E\u63D2\u5165\u6570\u636E\u5E93\uFF0C\u540C\u65F6\u751F\u4EA7\u6D88\u606F\u81F3\u53E6\u4E00\u4E2Atopic\uFF0C\u4E0D\u4F1A\u4EA7\u751F\u91CD\u590D\u6570\u636E
spring.kafka.consumer.properties.group.id=defaultConsumerGroup

# \u6D88\u8D39\u4F1A\u8BDD\u8D85\u65F6\u65F6\u95F4(\u8D85\u8FC7\u8FD9\u4E2A\u65F6\u95F4consumer\u6CA1\u6709\u53D1\u9001\u5FC3\u8DF3,\u5C31\u4F1A\u89E6\u53D1rebalance\u64CD\u4F5C)
#spring.kafka.consumer.properties.session.timeout.ms=120000
# \u6D88\u8D39\u8BF7\u6C42\u8D85\u65F6\u65F6\u95F4
#spring.kafka.consumer.properties.request.timeout.ms=180000
#spring.kafka.consumer.properties.spring.json.value.default.type=
spring.kafka.consumer.properties.spring.json.trusted.packages=com.ibothub.heap.kafka.model
# \u662F\u5426\u81EA\u52A8\u63D0\u4EA4offset
spring.kafka.consumer.enable-auto-commit=false
# \u63D0\u4EA4offset\u5EF6\u65F6(\u63A5\u6536\u5230\u6D88\u606F\u540E\u591A\u4E45\u63D0\u4EA4offset)
#spring.kafka.consumer.auto-commit-interval=1000ms

# \u5F53kafka\u4E2D\u6CA1\u6709\u521D\u59CBoffset\u6216offset\u8D85\u51FA\u8303\u56F4\u65F6\u5C06\u81EA\u52A8\u91CD\u7F6Eoffset
# earliest:\u91CD\u7F6E\u4E3A\u5206\u533A\u4E2D\u6700\u5C0F\u7684offset;
# latest:\u91CD\u7F6E\u4E3A\u5206\u533A\u4E2D\u6700\u65B0\u7684offset(\u6D88\u8D39\u5206\u533A\u4E2D\u65B0\u4EA7\u751F\u7684\u6570\u636E);
# none:\u53EA\u8981\u6709\u4E00\u4E2A\u5206\u533A\u4E0D\u5B58\u5728\u5DF2\u63D0\u4EA4\u7684offset,\u5C31\u629B\u51FA\u5F02\u5E38;
spring.kafka.consumer.auto-offset-reset=latest
#spring.kafka.consumer.fetch-min-size=314572800
#spring.kafka.consumer.fetch-max-wait=1s
# Kafka\u63D0\u4F9B\u7684\u5E8F\u5217\u5316\u548C\u53CD\u5E8F\u5217\u5316\u7C7B
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# \u6D88\u8D39\u7AEF\u76D1\u542C\u7684topic\u4E0D\u5B58\u5728\u65F6\uFF0C\u9879\u76EE\u542F\u52A8\u4F1A\u62A5\u9519(\u5173\u6389)
spring.kafka.listener.missing-topics-fatal=false
# \u624B\u52A8\u6D88\u8D39
spring.kafka.listener.ack-mode=manual_immediate
# \u8BBE\u7F6E\u5355\u6761\u6D88\u8D39
#spring.kafka.listener.type=single
# \u8BBE\u7F6E\u6279\u91CF\u6D88\u8D39
 spring.kafka.listener.type=batch

# \u6279\u91CF\u6D88\u8D39\u6BCF\u6B21\u6700\u591A\u6D88\u8D39\u591A\u5C11\u6761\u6D88\u606F
# spring.kafka.consumer.max-poll-records=50
logging.level.root=warn
logging.level.com.ibothub=debug
logging.level.org.apache.kafka=debug
logging.level.org.springframework.kafka=debug
